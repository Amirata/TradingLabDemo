// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingJournal.Infrastructure.Data;

#nullable disable

namespace TradingJournal.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250213071007_Add one to many user trading technic and plan")]
    partial class Addonetomanyusertradingtechnicandplan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingJournal.Domain.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CloseDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("ClosePrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Commission")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EntryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("EntryPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("GrossProfit")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<double>("NetProfit")
                        .HasColumnType("double precision");

                    b.Property<double>("Pips")
                        .HasColumnType("double precision");

                    b.Property<int>("PositionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<double>("StopLossPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Swap")
                        .HasColumnType("double precision");

                    b.Property<int>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("TradingPlanId")
                        .HasColumnType("uuid");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TradingPlanId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly?>("FromTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SelectedDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<TimeOnly?>("ToTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TradingPlans");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingTechnic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TradingTechnics");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingTechnicImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TradingTechnicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TradingTechnicId");

                    b.ToTable("TradingTechnicImages");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradingPlanTradingTechnic", b =>
                {
                    b.Property<Guid>("TechnicsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TradingPlansId")
                        .HasColumnType("uuid");

                    b.HasKey("TechnicsId", "TradingPlansId");

                    b.HasIndex("TradingPlansId");

                    b.ToTable("PlansTechnics", (string)null);
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.Trade", b =>
                {
                    b.HasOne("TradingJournal.Domain.Models.TradingPlan", "TradingPlan")
                        .WithMany("Trades")
                        .HasForeignKey("TradingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradingPlan");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingPlan", b =>
                {
                    b.HasOne("TradingJournal.Domain.Models.User", "User")
                        .WithMany("TradingPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingTechnic", b =>
                {
                    b.HasOne("TradingJournal.Domain.Models.User", "User")
                        .WithMany("TradingTechnic")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingTechnicImage", b =>
                {
                    b.HasOne("TradingJournal.Domain.Models.TradingTechnic", null)
                        .WithMany("Images")
                        .HasForeignKey("TradingTechnicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingPlanTradingTechnic", b =>
                {
                    b.HasOne("TradingJournal.Domain.Models.TradingTechnic", null)
                        .WithMany()
                        .HasForeignKey("TechnicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingJournal.Domain.Models.TradingPlan", null)
                        .WithMany()
                        .HasForeignKey("TradingPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingPlan", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.TradingTechnic", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TradingJournal.Domain.Models.User", b =>
                {
                    b.Navigation("TradingPlans");

                    b.Navigation("TradingTechnic");
                });
#pragma warning restore 612, 618
        }
    }
}
